{
  "id": 651,
  "name": "Space Cube Wall",
  "fragment": "precision highp float;\nprecision highp int;\nuniform mat4 modelMatrix;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\nuniform mat3 normalMatrix;\nuniform float time;\nuniform vec3 color;\nuniform float Cube_Edges1456026683083_8_brightness;\nuniform float falloff;\nuniform vec3 baseColor;\nuniform float Star_Swamp1456026805002_86_brightness;\nuniform float starRadius;\nuniform vec3 starColor;\nuniform float starDensity;\nuniform float speed;\nuniform vec2 resolution;\nvarying vec3 Cube_Edges1456026683083_8_vPosition;\nvarying vec3 Cube_Edges1456026683083_8_vNormal;\nvarying vec2 Cube_Edges1456026683083_8_vUv;\nvarying vec2 Cube_Edges1456026683083_8_vUv2;\nvarying vec2 Star_Swamp1456026805002_86_vUv;\nvarying vec3 Star_Swamp1456026805002_86_vPosition;\nvarying vec3 Star_Swamp1456026805002_86_vNormal;\nfloat field(in vec3 p) \n{\n    float strength = 7. + .03 * log(1.e-6 + fract(sin(time) * 4373.11));\n    float accum = 0.;\n    float prev = 0.;\n    float tw = 0.;\n    for (int i = 0;\n i < 32; ++i) \n    {\n        float mag = dot(p, p);\n        p = abs(p) / mag + vec3(-.51, -.4, -1.3);\n        float w = exp(-float(i) / 7.);\n        accum += w * exp(-strength * pow(abs(mag - prev), 2.3));\n        tw += w;\n        prev = mag;\n    }\n    return max(0., 5. * accum / tw - .7);\n}\nvec3 nrand3(vec2 co) \n{\n    vec3 a = fract(cos(co.x * 8.3e-3 + co.y) * vec3(1.3e5, 4.7e5, 2.9e5));\n    vec3 b = fract(sin(co.x * 0.3e-3 + co.y) * vec3(8.1e5, 1.0e5, 0.1e5));\n    vec3 c = mix(a, b, 0.5);\n    return c;\n}\nvarying vec2 Parallax_Starfield1456026810894_97_vUv;\nfloat starrand(float seedx, float seedy, int seedp) \n{\n    return 0.05 + 0.9 * fract(sin(float(seedp) * 437.234) * 374.2542 - cos(seedx * 432.252) * 23.643 + sin(seedy * 73.2454) * 372.23455);\n}\nvec4 Cube_Edges1456026683083_8_main() \n{\n    vec4 Cube_Edges1456026683083_8_gl_FragColor = vec4(0.0);\n    vec2 multiplier = pow(Cube_Edges1456026683083_8_vUv - 0.5, vec2(falloff));\n    Cube_Edges1456026683083_8_gl_FragColor = vec4(color * Cube_Edges1456026683083_8_brightness * length(multiplier), 1.0);\n    return Cube_Edges1456026683083_8_gl_FragColor *= 1.0;\n}\nvec4 Star_Swamp1456026805002_86_main() \n{\n    vec4 Star_Swamp1456026805002_86_gl_FragColor = vec4(0.0);\n    vec2 uv = 1.0 * Star_Swamp1456026805002_86_vUv.xy - 1.0;\n    vec2 uvs = uv;\n    vec3 p = vec3(uvs / 4., 0) + vec3(2., -1.3, -1.);\n    p += 0.15 * vec3(sin(time / 16.), sin(time / 12.), sin(time / 128.));\n    vec3 p2 = vec3(uvs / (4. + sin(time * 0.11) * 0.2 + 0.2 + sin(time * 0.15) * 0.3 + 0.4), 1.5) + vec3(2., -1.3, -1.);\n    p2 += 0.15 * vec3(sin(time / 16.), sin(time / 12.), sin(time / 128.));\n    vec3 p3 = vec3(uvs / (4. + sin(time * 0.14) * 0.23 + 0.23 + sin(time * 0.19) * 0.31 + 0.31), 0.5) + vec3(2., -1.3, -1.);\n    p3 += 0.15 * vec3(sin(time / 16.), sin(time / 12.), sin(time / 128.));\n    float t = field(p);\n    float t2 = field(p2);\n    float t3 = field(p3);\n    float v = (1. - exp((abs(uv.x) - 1.) * 6.)) * (1. - exp((abs(uv.y) - 1.) * 6.));\n    vec3 c1 = mix(.8, 1., v) * vec3(1.8 * t * t * t, 1.4 * t * t, t);\n    vec3 c2 = mix(.8, 1., v) * vec3(1.4 * t2 * t2 * t2, 1.8 * t2 * t2, t2);\n    vec3 c3 = mix(.8, 1., v) * vec3(1.4 * t3 * t3 * t3, 1.8 * t3 * t3, t3);\n    c1 *= baseColor;\n    c2 *= baseColor;\n    c3 *= baseColor;\n    Star_Swamp1456026805002_86_gl_FragColor = vec4(Star_Swamp1456026805002_86_brightness * vec3(c1 * 0.7 + c2 * 0.5 + c3 * 0.3), 1.0);\n    return Star_Swamp1456026805002_86_gl_FragColor *= 0.3;\n}\nvec4 Parallax_Starfield1456026810894_97_main(void) \n{\n    vec4 Parallax_Starfield1456026810894_97_gl_FragColor = vec4(0.0);\n    vec2 position = Parallax_Starfield1456026810894_97_vUv.xy * resolution.xy;\n    Parallax_Starfield1456026810894_97_gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\n    for (int p = 0;\n p < 20; p++) \n    {\n        float scale = (1.0 / starRadius) + float(p);\n        vec2 vpos = position * scale;\n        vpos.x += (time * speed) / scale;\n        vpos.y += speed * time / scale;\n        vec2 spos = vec2(starrand(floor(vpos.x), floor(vpos.y), p), starrand(10.5 + floor(vpos.x), 10.5 + floor(vpos.y), p));\n        float px = scale / 80.0 / 3.0;\n        float size = 1.0 / (scale * (500.0 / starDensity));\n        float brite = 1.0;\n        if (size < px) \n        {\n            brite = size / px;\n            size = px;\n        }\n         Parallax_Starfield1456026810894_97_gl_FragColor.rgb += starColor * min(1.0, max(0.0, starDensity - length(spos - fract(vpos)) / size)) * brite;\n    }\n    return Parallax_Starfield1456026810894_97_gl_FragColor *= 1.0;\n}\nvoid main() \n{\n    gl_FragColor = (Cube_Edges1456026683083_8_main() + Parallax_Starfield1456026810894_97_main() + Star_Swamp1456026805002_86_main()); }\n",
  "vertex": "precision highp float;\nprecision highp int;\nuniform mat4 modelMatrix;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\nuniform mat3 normalMatrix;\nuniform vec3 cameraPosition;\nuniform float time;\nattribute vec3 position;\nattribute vec3 normal;\nattribute vec2 uv;\nattribute vec2 uv2;\nvarying vec3 Cube_Edges1456026683083_8_vPosition;\nvarying vec3 Cube_Edges1456026683083_8_vNormal;\nvarying vec2 Cube_Edges1456026683083_8_vUv;\nvarying vec2 Cube_Edges1456026683083_8_vUv2;\nvarying vec2 Star_Swamp1456026805002_86_vUv;\nvarying vec3 Star_Swamp1456026805002_86_vPosition;\nvarying vec3 Star_Swamp1456026805002_86_vNormal;\nvarying vec3 Parallax_Starfield1456026810894_97_vPosition;\nvarying vec3 Parallax_Starfield1456026810894_97_vNormal;\nvarying vec2 Parallax_Starfield1456026810894_97_vUv;\nvarying vec2 Parallax_Starfield1456026810894_97_vUv2;\nvec4 Cube_Edges1456026683083_8_main() \n{\n    vec4 Cube_Edges1456026683083_8_gl_Position = vec4(0.0);\n    Cube_Edges1456026683083_8_vNormal = normal;\n    Cube_Edges1456026683083_8_vUv = uv;\n    Cube_Edges1456026683083_8_vUv2 = uv2;\n    Cube_Edges1456026683083_8_vPosition = position;\n    Cube_Edges1456026683083_8_gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n    return Cube_Edges1456026683083_8_gl_Position *= 1.0;\n}\nvec4 Star_Swamp1456026805002_86_main() \n{\n    vec4 Star_Swamp1456026805002_86_gl_Position = vec4(0.0);\n    Star_Swamp1456026805002_86_vUv = uv;\n    Star_Swamp1456026805002_86_vPosition = position;\n    Star_Swamp1456026805002_86_vNormal = normal;\n    Star_Swamp1456026805002_86_gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n    return Star_Swamp1456026805002_86_gl_Position *= 0.3;\n}\nvec4 Parallax_Starfield1456026810894_97_main() \n{\n    vec4 Parallax_Starfield1456026810894_97_gl_Position = vec4(0.0);\n    Parallax_Starfield1456026810894_97_vNormal = normal;\n    Parallax_Starfield1456026810894_97_vUv = uv;\n    Parallax_Starfield1456026810894_97_vUv2 = uv2;\n    Parallax_Starfield1456026810894_97_vPosition = position;\n    Parallax_Starfield1456026810894_97_gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n    return Parallax_Starfield1456026810894_97_gl_Position *= 1.0;\n}\nvoid main() \n{\n    gl_Position = Cube_Edges1456026683083_8_main() + Star_Swamp1456026805002_86_main() + Parallax_Starfield1456026810894_97_main();}\n",
  "uniforms": {
    "cameraPosition": {
      "type": "v3",
      "glslType": "vec3"
    },
    "time": {
      "type": "f",
      "glslType": "float"
    },
    "falloff": {
      "value": "5",
      "type": "f",
      "glslType": "float"
    },
    "Cube_Edges1456026683083_8_brightness": {
      "value": "17.85125984",
      "type": "f",
      "glslType": "float"
    },
    "color": {
      "value": {
        "r": 0.7098039215686275,
        "g": 0.9254901960784314,
        "b": 1
      },
      "type": "c",
      "glslType": "vec3"
    },
    "baseColor": {
      "value": {
        "r": 0.6549019607843137,
        "g": 0.3254901960784314,
        "b": 0.43137254901960786
      },
      "type": "c",
      "glslType": "vec3"
    },
    "Star_Swamp1456026805002_86_brightness": {
      "value": "3",
      "type": "f",
      "glslType": "float"
    },
    "starRadius": {
      "value": "0.5",
      "type": "f",
      "glslType": "float"
    },
    "starDensity": {
      "value": "5",
      "type": "f",
      "glslType": "float"
    },
    "starColor": {
      "value": {
        "r": 0.796078431372549,
        "g": 0.9254901960784314,
        "b": 0.9411764705882353
      },
      "type": "c",
      "glslType": "vec3"
    },
    "speed": {
      "value": "0.5",
      "type": "f",
      "glslType": "float"
    },
    "resolution": {
      "value": {
        "x": "10",
        "y": "10"
      },
      "type": "v2",
      "glslType": "vec2"
    }
  },
  "url": "http://shaderfrog.com/app/view/651",
  "user": {
    "username": "andrewray",
    "url": "http://shaderfrog.com/app/profile/andrewray"
  }
}
